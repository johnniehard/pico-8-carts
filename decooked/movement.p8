pico-8 cartridge // http://www.pico-8.com
version 16
__lua__
//hello
-- debug=true
// sprite scale
s=8

function mover(x, y, sprites)
    local m = {}
    // location
    m.l={x=x,y=y}
    // next location
    m.nl={x=x,y=y}
    // acceleration
    m.a={x=0,y=0}
    // velocity, previous velocity
    m.v={x=0,y=0} m.pv={x=0,y=0}
    // max velocity
    m.mv=10
    // flip xplaymover
    m.fx=false
    // flip y
    m.fy=false
    // damping
    m.d=0.75
    // sprite number
    m.sn=2
    // sprites
    m.ss=sprites

    m.push = function(_, x, y)
        // add force to acceleration
        _.a.x+=x
        _.a.y+=y
    end

    m.update = function(_)
        if _.extupdate != nil then _.extupdate(_) end
        // add acceleration to velocity
        _.v.x+=_.a.x
        _.v.y+=_.a.y
        // cap velocity
        if(_.v.x > _.mv) then _.v.x=_.mv end
        if(_.v.y > _.mv) then _.v.y=_.mv end
        if(_.v.x < -_.mv) then _.v.x=-_.mv end
        if(_.v.y < -_.mv) then _.v.y=-_.mv end
        // sprite flip
        if(_.v.x>0) then _.fx=false elseif(_.v.x<0) then _.fx=true end
        if(_.v.y>0) then _.fy=false elseif(_.v.y<0) then _.fy=true end
        // collision detection
        _.nlx={x=_.l.x+_.v.x,y=_.l.y}
        local ulx=mget(pxs(_.nlx.x-2),pxs(_.nlx.y-4))
        local urx=mget(pxs(_.nlx.x+1),pxs(_.nlx.y-4))
        local llx=mget(pxs(_.nlx.x-2),pxs(_.nlx.y+3))
        local lrx=mget(pxs(_.nlx.x+1),pxs(_.nlx.y+3))
        _.nly={x=_.l.x,y=_.l.y+_.v.y}
        local uly=mget(pxs(_.nly.x-2),pxs(_.nly.y-4))
        local ury=mget(pxs(_.nly.x+1),pxs(_.nly.y-4))
        local lly=mget(pxs(_.nly.x-2),pxs(_.nly.y+3))
        local lry=mget(pxs(_.nly.x+1),pxs(_.nly.y+3))
        // add velocity to location
        if(_.v.x > 0) then
            if(not fget(urx,0) and not fget(lrx,0)) then _.l.x+=_.v.x end
        elseif(_.v.x < 0) then
            if(not fget(ulx,0) and not fget(llx,0)) then _.l.x+=_.v.x end
        end
        if(_.v.y > 0) then
            if(not fget(lly,0) and not fget(lry,0)) then _.l.y+=_.v.y end
        elseif(_.v.y < 0) then
            if(not fget(uly,0) and not fget(ury,0)) then _.l.y+=_.v.y end
        end
        // damping
        _.pv={x=_.v.x,y=_.v.y}
        _.v.x*=_.d
        _.v.y*=_.d
        // clear acceleration
        _.a.x*=0
        _.a.y*=0

        _.animate(_)
    end

    m.animate = function(_)
        if(_.pv.x != 0) then _.sn=_.ss[1] end
        if(_.pv.y > 0) then _.sn=_.ss[2] end
        if(_.pv.y < 0) then _.sn=_.ss[3] end
    end

    m.draw = function(_)
        spr(_.sn,_.l.x-4, _.l.y-4,1,1,_.fx, false)
    end

    return m
end

function player()
 local p=mover(spx(1)+4, spx(1)+4, {2,3,4})
 // items
 p.is={}
 // dash power
 p.dp=20
 p.extupdate = function(_)
    // walk
    if(btn(0)) then _.push(_,-0.2, 0) end
    if(btn(1)) then _.push(_,0.2, 0) end
    if(btn(2)) then _.push(_,0, -0.2) end
    if(btn(3)) then _.push(_,0, 0.2) end
    // dash
    if(btnp(4)) then
        _.push(_,_.a.x*_.dp,_.a.y*_.dp)
    end
 end
 return p
end

// Helper functions
// pixels to sprite unit
function pxs(px)
    return (px-px%8)/8
end
// sprite unit to pixels
function spx(s)
    px=s*8
    return px-px%8
end

p=player()

function _update()
 p.update(p)
end

function _draw()
    cls()

    map(0,0,0,0,16,16)

    if debug then
        rect(pxs(p.l.x)*s,pxs(p.l.y)*s,pxs(p.l.x)*s+7,pxs(p.l.y)*s+7,7)
    end

    p.draw(p)

    if debug then pset(p.l.x,p.l.y,7) end
    if debug then print(pxs(p.l.x),0,0,7) end
end

__gfx__
00000000dddddddd0099990000999900009999000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000dddddddd0099990000999900009999000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700dddddddd0066630000636300009999000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000dddddddd0211110000111200002221000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000dddddddd0211110000112100002222000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700dddddddd0211110000221100001222000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000dddddddd0088880000888800008888000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000dddddddd0080080000800800008008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__gff__
0001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0101010101010101010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0100000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0100000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0100000001000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0100000001000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0100000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0100000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0101010101010101010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
